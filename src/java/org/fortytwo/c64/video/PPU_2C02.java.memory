package org.fortytwo.c64.video;

import org.fortytwo.c64.cpu.CycleObserver;
import org.fortytwo.c64.cpu.CPU;

import org.fortytwo.c64.memory.Memory;
import org.fortytwo.c64.memory.MemoryHandler;
import org.fortytwo.c64.memory.RAM;
import org.fortytwo.c64.memory.ROM;

import java.util.logging.Logger;
import java.util.logging.Level;

public class PPU_2C02 implements MemoryHandler, CycleObserver
{
    private Logger logger = Logger.getLogger(this.getClass().getName());

    public static final int NUM_REGISTERS = 8;

    //public static final int FIRST_VISIBLE_SCANLINE = 8;
    public static final int PATTERN_OFFSET = 1;
    //    public static final int FIRST_VISIBLE_SCANLINE = 20;
    public static final int FIRST_VISIBLE_SCANLINE = 20;
    public static final int LAST_VISIBLE_SCANLINE = FIRST_VISIBLE_SCANLINE + 240; // 242
    public static final int SCANLINES_PER_FRAME = 262;
    public static final int PPU_CYCLES_PER_LINE = 341; // PPU is 3 times faster than CPU
    public static final int CPU_CYCLES_PER_LINE = 113; // 341/3=113.66. Every 3 cpu cycles, we need to add 2 more to get to the correct PPU count
    public static final int PPU_CYCLES_PER_FRAME = SCANLINES_PER_FRAME * PPU_CYCLES_PER_LINE;

    public static final int SPRITE_COUNT = 64;
    public static final int BYTES_PER_SPRITE = 4;
    public static final int HORIZONTAL_TILE_COUNT = 32;

    public static final int CONTROL_REGISTER_1 = 0x00;
    public static final int CONTROL_REGISTER_2 = 0x01;
    public static final int STATUS_REGISTER = 0x02;
    public static final int SPRITE_MEMORY_ADDRESS = 0x03;
    public static final int SPRITE_MEMORY_DATA = 0x04;
    public static final int SCROLL_OFFSET = 0x05;
    public static final int PPU_MEMORY_ADDRESS = 0x06; // First write upper byte, then lower
    public static final int PPU_MEMORY_DATA = 0x07; // After setting address, read/write here

    /** Control Register 1 bits **/
    public static final int CR1_NAME_TABLE = 0x3; // 0 = 0x2000, 1 = 0x2400, 2 = 0x2800, 3 = 0x2C00
    public static final int CR1_VERTICAL_WRITE = 0x04; // 1 == ppu address goes by 32
    public static final int CR1_SPRITE_PATTERN_ADDRESS = 0x08; // 0 = 0x0000, 1 = 0x1000
    public static final int CR1_SCREEN_PATTERN_ADDRESS = 0x10; // 0 = 0x0000, 1 = 0x1000
    public static final int CR1_SPRITE_SIZE = 0x20; // 0 = 8x8, 1 = 8x16
    public static final int CR1_INTERRUPT_ON_HIT = 0x40; 
    public static final int CR1_INTERRUPT_ON_VBLANK = 0x80; // 1 == generate interrupt

    /** Control Register 2 bits **/
    public static final int CR2_UNKNOWN = 0x01;
    public static final int CR2_IMAGE_MASK = 0x02; // 0 = don't show left 8 columns
    public static final int CR2_SPRITE_MASK = 0x04; // 0 = don't show sprites in left 8 columns
    public static final int CR2_SCREEN_SWITCH = 0x08; // 1 = show, 0 = blank
    public static final int CR2_SPRITE_SWITCH = 0x10; // 1 = show sprites, 0 = hide

    public static final int STATUS_SPRITE0_HIT = 0x40;
    public static final int STATUS_VBLANK = 0x80; 
    
    private int[] nameTableAddresses = new int[] {0x2000,0x2400,0x2800,0x2C00};

    private int[] registers_r = new int[NUM_REGISTERS];
    private int[] registers_w = new int[NUM_REGISTERS];

    private int[] spriteAttributeMemory = new int[SPRITE_COUNT * BYTES_PER_SPRITE];
    private int spriteMemoryCounter = 0;
    private Sprite[] bufferedSprites = new Sprite[SPRITE_COUNT]; // technically we're only supposed to display 8

    private int ppuMemoryAddress = 0;
    private boolean lastPPUAddressWasHigh = false; // Last write to 0x2006 was the High Byte

    private int ppuCyclesUntilEndOfFrame;
    private int ppuCyclesUntilEndOfLine;
    private int scanLine = 0;

    private int horizontalTileCounter = 0;
    private int veritcalTileCounter = 0;
    private int fineVerticalScrollCounter = 0;
    private int fineHorizontalScrollLatch = 0;
    private int horizontalNameCounter = 0;
    private int verticalNameCounter = 0;

    private int previousSpriteCount = 0;
    public static final int PALETTE_ADDRESS = 0x3F00;
    private boolean displayEnabled = false;
    private boolean spritesEnabled = false;
    private Memory memory = null;

    private Screen videoScreen;
    
    
    private boolean usingVROM = true;
    public PPU_2C02(){
        ppuCyclesUntilEndOfFrame = PPU_CYCLES_PER_FRAME;
        ppuCyclesUntilEndOfLine = PPU_CYCLES_PER_LINE;

        videoScreen = null;
        //        registers_r[STATUS_REGISTER] = STATUS_VBLANK; // since we start out less than 20
        registers_w[CONTROL_REGISTER_1] = CR1_INTERRUPT_ON_VBLANK;
        
    }

    public void setMemory(Memory memory){
        this.memory = memory;
    }
    /*
    public void setRAM(RAM ram){
        this.ram = ram;
    }

    public void setPatternROM(ROM rom){
        this.rom = rom;
    }
    */
    public void setScreen(Screen screen){
        this.videoScreen = screen;
    }

    public int read(int address){
        //        logger.info("Read from: " + Integer.toHexString(address));
        switch (address){
        case STATUS_REGISTER:{ // 2
            int returnVal = registers_r[STATUS_REGISTER];
            registers_r[STATUS_REGISTER] = getBitsUnset(registers_r[STATUS_REGISTER], STATUS_VBLANK | STATUS_SPRITE0_HIT);
            return returnVal;
        }
        case SPRITE_MEMORY_DATA:{ // 4
            return readFromSpriteMemory();
        }
        case PPU_MEMORY_DATA:{ // 7
            int returnVal = 0xFF & registers_r[PPU_MEMORY_DATA]; // buffered read
            
            //int returnVal = 0xFF & memory.read(ppuMemoryAddress);
            registers_r[PPU_MEMORY_DATA] = 0xFF & memory.read(ppuMemoryAddress);
            if ((registers_w[CONTROL_REGISTER_1] & CR1_VERTICAL_WRITE) == 0){
                ppuMemoryAddress++;
            }
            /*        else {
                ppuMemoryAddress  = (ppuMemoryAddress + 32) % 2000;
            }
            */
            return returnVal;
        }

        default: throw new RuntimeException("Invalid read attempt: " + Integer.toHexString(address));
        }
    }

    public void write(int address, int value){
        //        logger.info("Write " + Integer.toHexString(value) + " to " + Integer.toHexString(address));

        switch (address){
        case CONTROL_REGISTER_1:{ // 0
            //logger.info("Write " + Integer.toHexString(value) + " to " + Integer.toHexString(address));
            registers_w[CONTROL_REGISTER_1] = value & 0xFF;
            if ((value & CR1_SPRITE_SIZE) != 0){
                logger.info("8x16!");
            }
            break;
        }
        case CONTROL_REGISTER_2:{ // 1
            //            logger.info("CR2: " + Integer.toHexString(value));
            registers_w[CONTROL_REGISTER_2] = value & 0xFF;
            displayEnabled = (registers_w[CONTROL_REGISTER_2] & CR2_SCREEN_SWITCH) != 0;
            spritesEnabled = (registers_w[CONTROL_REGISTER_2] & CR2_SPRITE_SWITCH) != 0;

            break;
        }
        case SPRITE_MEMORY_ADDRESS:{ // 3
            setSpriteMemoryAddress(value);
            break;
        }
        case SPRITE_MEMORY_DATA:{ // 4
            writeToSpriteMemory(value);
            break;
        }
        case SCROLL_OFFSET:{ // 5
            //            logger.info("Wrote to scroll offset: " + value);
            registers_w[SCROLL_OFFSET] = value;
            break;
        }
        case PPU_MEMORY_ADDRESS:{ /** 6 - write high byte, then low byte */
            if (lastPPUAddressWasHigh){
                lastPPUAddressWasHigh = false;
                ppuMemoryAddress = (registers_w[address] << 8) | (value & 0xFF);
                System.out.println("PPU Address: " + Integer.toHexString(ppuMemoryAddress));
                System.out.println("Scanline = " + scanLine);
            }
            else {
                lastPPUAddressWasHigh = true;
            }
            registers_w[address] = value;
            break;
        }
        case PPU_MEMORY_DATA: { // 7
            //            System.out.println("PPU MEMORY WRITE: " + Integer.toHexString(ppuMemoryAddress) + "," + Integer.toHexString(value));
            memory.write(ppuMemoryAddress, value & 0xFF);
            /*
            if (ppuMemoryAddress < 0x3F00){
                memory.write(ppuMemoryAddress, value & 0xFF);
            }
            else {
                memory.write(ppuMemoryAddress - 0x3F00, value & 0xFF);
            }
            */
            if ((registers_w[CONTROL_REGISTER_1] & CR1_VERTICAL_WRITE) == 0){
                ppuMemoryAddress++;
            }
            else {
                ppuMemoryAddress += 32;
            }
            //            if (ppuMemoryAddress >= ram.size()) { ppuMemoryAddress = 0; }
            break;
        }

        default: throw new RuntimeException("Invalid write attempt: " + Integer.toHexString(address));
        }
    }
    
    public void setSpriteMemoryAddress(int address){
        if (address > 0xFF){
            throw new RuntimeException("Invalid sprite memory address: " + Integer.toHexString(address));
        }
        
        spriteMemoryCounter = address;
    }

    public int readFromSpriteMemory(){
        int returnVal = spriteAttributeMemory[spriteMemoryCounter];
        spriteMemoryCounter = (spriteMemoryCounter + 1) % 256;

        return returnVal;

    }

    public void writeToSpriteMemory(int value){
        spriteAttributeMemory[spriteMemoryCounter] = value & 0xFF;
        if (value != 0){
            //            logger.info("Sprite data value: " + Integer.toHexString(value));
        }
        spriteMemoryCounter = (spriteMemoryCounter + 1) % 256;
    }
    
    public int tick(int cycles, CPU cpu){
        ppuCyclesUntilEndOfFrame -= (cycles * 3);
        ppuCyclesUntilEndOfLine -= (cycles * 3);
        
        if (ppuCyclesUntilEndOfLine <= 0){
            scanLine++;
            //            ppuMemoryAddress += 256; // handle the fact that we're not actually drawing
            if (scanLine == (LAST_VISIBLE_SCANLINE + 1)){
                registers_r[STATUS_REGISTER] |= STATUS_VBLANK;
                if ((registers_w[CONTROL_REGISTER_1] & CR1_INTERRUPT_ON_VBLANK) != 0){
                    cpu.handleNMI(); 
                }
            }
            else if (scanLine == FIRST_VISIBLE_SCANLINE){
                // clear VBlank flag
                registers_r[STATUS_REGISTER] = getBitsUnset(registers_r[STATUS_REGISTER],STATUS_VBLANK | STATUS_SPRITE0_HIT);
            }
            else if (scanLine == SCANLINES_PER_FRAME){
                if (ppuCyclesUntilEndOfFrame > 0){
                    throw new RuntimeException("Reached last line, but not end of frame: " + ppuCyclesUntilEndOfFrame);
                }
                videoScreen.repaint();
                scanLine = 0;
            }
            
            if (displayEnabled && scanLine >= FIRST_VISIBLE_SCANLINE && scanLine <= LAST_VISIBLE_SCANLINE){
                drawRasterLine(scanLine);
                //                videoScreen.repaint();
            }

            ppuCyclesUntilEndOfLine = PPU_CYCLES_PER_LINE + ppuCyclesUntilEndOfLine;
            

          
        }
        
        if (ppuCyclesUntilEndOfFrame <= 0){
            ppuCyclesUntilEndOfFrame = PPU_CYCLES_PER_FRAME + ppuCyclesUntilEndOfFrame; // handle underflow            scanLine = 0;
        }

        //        return ppuCyclesUntilEndOfFrame;
        return ppuCyclesUntilEndOfLine;
    }

    private void drawRasterLine(int line){
        //        System.out.println(ppuMemoryAddress);
        int nameTableAddress = nameTableAddresses[registers_w[CONTROL_REGISTER_1] & CR1_NAME_TABLE];
        int attributeTableAddress = nameTableAddress + 0x3C0;
        //logger.info("Name Table Address: " + Integer.toHexString(nameTableAddress));
        //        int screenPatternAddress = ((registers_w[CONTROL_REGISTER_1] & CR1_SCREEN_PATTERN_ADDRESS) != 0) ? 0x1000 : 0x0000;
        horizontalTileCounter = 0; 
        int x = 0;
        /// technically the previous line will have grabbed the first 2 tiles
        // for 32 tiles 
        
        // Pattern Table is 16 consecutive bytes for each tile where the first 8 
        // controls bit 0 of color and the second 8 controls bit 1
        for (int tile = 0; tile < HORIZONTAL_TILE_COUNT; tile++){
            // fetch 1 name table byte
            // every entry represents an 8x8 block
            
            int yOffset = (line - FIRST_VISIBLE_SCANLINE) / 8;
            int offset = yOffset * HORIZONTAL_TILE_COUNT + tile;
            int nameAddress = nameTableAddress + offset;

            

            //            ppuMemoryAddress = ppuMemoryAddress & (~0x7FFF);
            //ppuMemoryAddress = ppuMemoryAddress | (nameAddress - 0x2000); 
            /* TODO: This should be calculated
               during a read of 0x2006 to simulate
               drawing in real time rather than
               line by line
            */
            //ppuMemoryAddress = ppuMemoryAddress | (yOffset << 12);
            

            int nameData = memory.read(nameTableAddress + ppuMemoryAddress /*nameAddress*/);
            ppuMemoryAddress = (ppuMemoryAddress + 1) % 0x3FF;
            //int nameData = read(PPU_MEMORY_DATA);
            if (nameData != 0){
                //        logger.info("Name table value: " + Integer.toHexString(nameData));
            }
            horizontalTileCounter++;

            // every entry represents a 4x4 block of tiles
            // every block covers 8 lines, so we have 32 lines for each byte in the attribute table
            int attributeIndex = (((line - FIRST_VISIBLE_SCANLINE) / 32) * 8) + (tile / 4);
            int attributeData = memory.read(attributeTableAddress + attributeIndex);
            int upperBits = 0;
            // now select which of the attribute "quadrants" we're in:
            // 33 22 11 00 corresponding to:
            // 00 00 11 11
            // 00 00 11 11
            // 22 22 33 33
            // 22 22 33 33
            int tileMod = (tile % 4) / 2;
            int lineMod = ((line - FIRST_VISIBLE_SCANLINE) % 4) / 2;
            if (tileMod == 0 && lineMod == 0) { upperBits = attributeData & 0x3; }
            else if (tileMod == 1 && lineMod == 0) { upperBits = (attributeData & 0x0C) >> 2; }
            else if (tileMod == 0 && lineMod == 1) { upperBits = (attributeData & 0x30) >> 4; }
            else if (tileMod == 1 && lineMod == 1) { upperBits = (attributeData & 0xC0) >> 6; }
            

            drawBackgroundTile(nameData, upperBits, x, line);
            // fetch 1 attribute table byte
            //  int patternBitmap1 = memory.read(screenPatternAddress+(nameData*16)+ (line % 8));
            //            screenPatternAddress++;
            //int patternBitmap2 = memory.read(screenPatternAddress+(nameData*16)+ (line % 8) + 8);
            //            screenPatternAddress++;
            // fetch 2 pattern table bitmap bytes

            x += 8;
        }
        // for 64 sprites 

        // 
        if (spritesEnabled){
            if (previousSpriteCount > 0){
                //for (int i = previousSpriteCount - 1; i > 0; i--){
                for (int i = 0 ; i < previousSpriteCount; i++){
                    Sprite sprite = bufferedSprites[i];
                    drawSpriteTile(sprite.tile,sprite.colorInfo,sprite.spriteX,line,line-sprite.spriteY,(line == sprite.spriteY) || (line == sprite.spriteY + 7));
                }
            }
            
            int spriteCount = 0;
            for (int sprite = 0; sprite < SPRITE_COUNT; sprite++){
                //   determine if Y coord in range (for line + 1)
                int yCoord = spriteAttributeMemory[sprite * 4] - 1; 
                int diff = ((line - FIRST_VISIBLE_SCANLINE) - yCoord);
                if (sprite == 0 && line == yCoord && (registers_r[STATUS_REGISTER] & STATUS_SPRITE0_HIT) == 0){
                    registers_r[STATUS_REGISTER] |= STATUS_SPRITE0_HIT;
                }
                //if ((line - FIRST_VISIBLE_SCANLINE) >= yCoord && (line - FIRST_VISIBLE_SCANLINE) <= (yCoord + 8)){
                if (diff >= 0 && diff < 7){
                    int tile = spriteAttributeMemory[(sprite * 4) + 1];
                    int colorInfo = spriteAttributeMemory[(sprite *4) + 2];
                    int spriteX = spriteAttributeMemory[(sprite * 4) + 3];
                    bufferedSprites[spriteCount] = new Sprite(tile, colorInfo,yCoord + FIRST_VISIBLE_SCANLINE,spriteX);
                    spriteCount++;
                    
                    //                drawSpriteTile(tile,colorInfo, spriteX,line);
                }
                previousSpriteCount = spriteCount;       
                //   if sprite count > 8 mark SPRITE_OVERFLOW on 0x02 and ignore
            }
            
        }
        }

    private int getBitsUnset(int original, int mask){
        return original & (~mask);
    }

    private void drawSpriteTile(int tileNum, int attributes, int x, int line, int offset, boolean firstOrLast){
        int spritePatternAddress = ((registers_w[CONTROL_REGISTER_1] & CR1_SPRITE_PATTERN_ADDRESS) != 0) ? 0x1000 : 0x0000;
        //drawTile(tileNum, attributes, screenPatternAddress, x, line, firstOrLast);
        int y = line;
        int paletteUpper = attributes & 0x3;
        boolean reverse = (0x40 & attributes) != 0;
        boolean flipVertical = (0x80 & attributes) != 0;
        // Tiles are laid out as two image planes each representing
        // one bit of the color, they each have 8 bytes, so 2x8 = 16
        int patternBitmap1 = 0;
        int patternBitmap2 = 0;
        if (! flipVertical){
            patternBitmap1 = memory.read(spritePatternAddress+(tileNum*16)+ offset);
            patternBitmap2 = memory.read(spritePatternAddress+(tileNum*16)+ offset + 8);
        }
        else {
            patternBitmap1 = memory.read(spritePatternAddress+(tileNum*16)+ (7 - offset));
            patternBitmap2 = memory.read(spritePatternAddress+(tileNum*16)+ (7 - offset) + 8);
        }

        if (! reverse){
            x += 7;
        }

        // we actually draw from the end of it
        // which is why we add for !reverse
        for (int i = 0; i < 8; i++){
            if (x < 256){
                int bit1 = (patternBitmap1 >> i) & 0x01;
                int bit2 = ((patternBitmap2 >> i) & 0x01) << 1;
                int pixelValue = ((bit1) | (bit2)) & 0x3;
                pixelValue |= (paletteUpper << 2);

                int paletteValue = memory.read(PALETTE_ADDRESS + pixelValue);
                int color = getNESColor(paletteValue);
                
                if (paletteValue != 0){
                    videoScreen.setPixel(x,y,getNESColor(paletteValue));
                }
                if (reverse){
                    x++;
                }
                else {
                    x--;
                };
            }
        }

    }

    private void drawBackgroundTile(int tileNum, int paletteUpper, int x, int line){
        int screenPatternAddress = ((registers_w[CONTROL_REGISTER_1] & CR1_SCREEN_PATTERN_ADDRESS) != 0) ? 0x1000 : 0x0000;
        //        drawTile(tileNum, paletteUpper, screenPatternAddress, x, line, (line - FIRST_VISIBLE_SCANLINE) % 8 == 0);
        int y = line;

        // Tiles are laid out as two image planes each representing
        // one bit of the color, they each have 8 bytes, so 2x8 = 16
        int patternBitmap1 = 0;
        int patternBitmap2 = 0;
        patternBitmap1 = memory.read(screenPatternAddress+(tileNum*16)+ ((y - FIRST_VISIBLE_SCANLINE) % 8));
        patternBitmap2 = memory.read(screenPatternAddress+(tileNum*16)+ ((y - FIRST_VISIBLE_SCANLINE) % 8) + 8);

        x += 7;

        for (int i = 0; i < 8; i++){
            if (x < 256){
                int bit1 = (patternBitmap1 >> i) & 0x01;
                int bit2 = ((patternBitmap2 >> i) & 0x01) << 1;
                int pixelValue = ((bit1) | (bit2)) & 0x3;
                pixelValue |= (paletteUpper << 2);

                int paletteValue = memory.read(PALETTE_ADDRESS + pixelValue);
                int color = getNESColor(paletteValue);
                
                videoScreen.setPixel(x,y,getNESColor(paletteValue));
                
                x--;
            }
        }


    }

    private void drawTile(int tileNum, int attributes, int patternAddress, int x, int y, boolean firstOrLast ){
        int paletteUpper = attributes & 0x3;
        boolean reverse = (0x40 & attributes) != 0;
        boolean flipVertical = (0x80 & attributes) != 0;
        // Tiles are laid out as two image planes each representing
        // one bit of the color, they each have 8 bytes, so 2x8 = 16
        int patternBitmap1 = 0;
        int patternBitmap2 = 0;
        if (! flipVertical){
            patternBitmap1 = memory.read(patternAddress+(tileNum*16)+ ((y - PATTERN_OFFSET) % 8));
            patternBitmap2 = memory.read(patternAddress+(tileNum*16)+ ((y - PATTERN_OFFSET) % 8) + 8);
        }
        else {
            patternBitmap1 = memory.read(patternAddress+(tileNum*16)+ (7 - ((y - PATTERN_OFFSET) % 8)));
            patternBitmap2 = memory.read(patternAddress+(tileNum*16)+ (7 - ((y - PATTERN_OFFSET) % 8)) + 8);
        }
        //int patternBitmap1 = memory.read(patternAddress + (tileNum * 16) + ((y % 8) * 2));
        //int patternBitmap2 = memory.read(patternAddress + (tileNum * 16) + ((y % 8) * 2) + 1);

        if (! reverse){
            x += 7;
        }

        for (int i = 0; i < 8; i++){
            if (x < 256){
                int bit1 = (patternBitmap1 >> i) & 0x01;
                int bit2 = ((patternBitmap2 >> i) & 0x01) << 1;
                int pixelValue = ((bit1) | (bit2)) & 0x3;
                pixelValue |= (paletteUpper << 2);

                int paletteValue = memory.read(PALETTE_ADDRESS + pixelValue);
                int color = getNESColor(paletteValue);
                
                //                if (paletteValue != 0){
                videoScreen.setPixel(x,y,getNESColor(paletteValue));
                    //}
                if (reverse){
                    x++;
                }
                else {
                    x--;
                };
            }
        }
        
    }

    private int getNESColor(int index){
        switch (index){
        case 0: return 0xFFFFFF; // 0x525252
        case 1: return 0x000080;
        case 2: return 0x08008A;
        case 3: return 0x2C007E;
        case 4: return 0x4A004E;
        case 5: return 0x500006;
        case 6: return 0x440000;
        case 7: return 0x260800;
        case 8: return 0xA2000A;
        case 9: return 0x002E00;
        case 10: return 0x003200;
        case 11: return 0x00260A;
        case 12: return 0x001C48;
        case 13: return 0x000000; 
        case 14: return 0x000000; 
        case 15: return 0x000000; 

        case 16: return 0xA4A4A4;
        case 17: return 0x0038CE;
        case 18: return 0x3416EC;
        case 19: return 0x5E04DC;
        case 20: return 0x8C00B0;
        case 21: return 0x9A004C;
        case 22: return 0x901800;
        case 23: return 0x703600;
        case 24: return 0x4C5400;
        case 25: return 0x0E6C00;
        case 26: return 0x007400;
        case 27: return 0x006C2C;
        case 28: return 0x005E84;
        case 29: return 0x000000;
        case 30: return 0x000000;
        case 31: return 0x000000;

        case 32: return 0xFFFFFF;
        case 33: return 0x4C9CFF;
        case 34: return 0x7C78FF;
        case 35: return 0xA664FF;
        case 36: return 0xDA5AFF;
        case 37: return 0xF054C0;
        case 38: return 0xF06A56;
        case 39: return 0xD68610;
        case 40: return 0xBAA400;
        case 41: return 0x76C000;
        case 42: return 0x46CC1A;
        case 43: return 0x2EC866;
        case 44: return 0x34C2BE;
        case 45: return 0x3A3A3A;
        case 46: return 0x000000; 
        case 47: return 0x000000; 

        case 48: return 0xFFFFFF;
        case 49: return 0xB6DAFF;
        case 50: return 0xC8CAFF;
        case 51: return 0xDAC2FF;
        case 52: return 0xF0BEFF;
        case 53: return 0xFCBCEE;
        case 54: return 0xFAC2C0;
        case 55: return 0xF2CCA2;
        case 56: return 0xE6DA92;
        case 57: return 0xCCE68E;
        case 58: return 0xB8EEA2;
        case 59: return 0xAEEABE;
        case 60: return 0xAEE8E2;
        case 61: return 0xB0B0B0;
        case 62: return 0x000000; // 0x000000
        case 63: return 0x000000; // 0x000000
        }
        return -1;
    }

    class Sprite 
    {
        public int tile;
        public int colorInfo;
        public int spriteX;
        public int spriteY;
        Sprite(int tile, int colorInfo, int spriteY, int spriteX){
            this.tile = tile;
            this.colorInfo = colorInfo;
            this.spriteX = spriteX;
            this.spriteY = spriteY;
        }
    }
}
